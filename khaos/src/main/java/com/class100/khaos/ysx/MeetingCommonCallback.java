package com.class100.khaos.ysx;import com.chinamobile.ysx.YSXInMeetingEventHandler;import com.chinamobile.ysx.YSXMeetingServiceListener;import com.chinamobile.ysx.YSXMeetingStatus;import com.chinamobile.ysx.YSXSdk;public class MeetingCommonCallback extends BaseCallback<MeetingCommonCallback.CommonEvent> {    public interface CommonEvent extends BaseEvent {        void onWebinarNeedRegister();        void onMeetingFail(int errorCode, int internalErrorCode);        void onMeetingLeaveComplete(long ret);        void onMeetingStatusChanged(YSXMeetingStatus meetingStatus, int errorCode, int internalErrorCode);        void onMeetingNeedPasswordOrDisplayName(boolean needPassword, boolean needDisplayName, YSXInMeetingEventHandler handler);        void onMeetingNeedCloseOtherMeeting(YSXInMeetingEventHandler inMeetingEventHandler);        void onJoinWebinarNeedUserNameAndEmail(YSXInMeetingEventHandler inMeetingEventHandler);    }    static MeetingCommonCallback instance;    private MeetingCommonCallback() {        init();    }    protected void init() {        YSXSdk.getInstance().getInMeetingService().addListener(commonListener);        YSXSdk.getInstance().getMeetingService().addListener(serviceListener);    }    public static MeetingCommonCallback getInstance() {        if (null == instance) {            synchronized (MeetingCommonCallback.class) {                if (null == instance) {                    instance = new MeetingCommonCallback();                }            }        }        return instance;    }    YSXMeetingServiceListener serviceListener = new YSXMeetingServiceListener() {        @Override        public void onMeetingStatusChanged(YSXMeetingStatus meetingStatus, int errorCode, int internalErrorCode) {            for (CommonEvent event : callbacks) {                event.onMeetingStatusChanged(meetingStatus, errorCode, internalErrorCode);            }        }    };    SimpleInMeetingListener commonListener = new SimpleInMeetingListener() {        @Override        public void onWebinarNeedRegister() {            for (CommonEvent event : callbacks) {                event.onWebinarNeedRegister();            }        }        public void onMeetingFail(int errorCode, int internalErrorCode) {            for (CommonEvent event : callbacks) {                event.onMeetingFail(errorCode, internalErrorCode);            }        }        @Override        public void onMeetingLeaveComplete(long ret) {            for (CommonEvent event : callbacks) {                event.onMeetingLeaveComplete(ret);            }        }        @Override        public void onMeetingNeedPasswordOrDisplayName(boolean needPassword, boolean needDisplayName, YSXInMeetingEventHandler handler) {            for (CommonEvent event : callbacks) {                event.onMeetingNeedPasswordOrDisplayName(needPassword, needDisplayName, handler);            }        }        @Override        public void onMeetingNeedColseOtherMeeting(YSXInMeetingEventHandler inMeetingEventHandler) {            for (CommonEvent event : callbacks) {                event.onMeetingNeedCloseOtherMeeting(inMeetingEventHandler);            }        }        @Override        public void onJoinWebinarNeedUserNameAndEmail(YSXInMeetingEventHandler inMeetingEventHandler) {            for (CommonEvent event : callbacks) {                event.onJoinWebinarNeedUserNameAndEmail(inMeetingEventHandler);            }        }    };}